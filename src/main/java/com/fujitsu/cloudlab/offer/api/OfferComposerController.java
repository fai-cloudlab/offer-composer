package com.fujitsu.cloudlab.offer.api;

import com.fujitsu.cloudlab.commons.constants.AppConstants;
import com.fujitsu.cloudlab.commons.exception.ApiException;
import com.fujitsu.cloudlab.commons.exception.ErrorResponses;
import com.fujitsu.cloudlab.offer.json.model.Offer;
import com.fujitsu.cloudlab.offer.json.model.OffersList;
import com.fujitsu.cloudlab.offer.json.model.Product;
import com.fujitsu.cloudlab.offer.json.model.SearchCriteria;
import com.fujitsu.cloudlab.offer.service.OfferComposerService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/offers")
@Api(tags = {"Offers"})
public class OfferComposerController {

  @Autowired OfferComposerService offerComposerService;

  @ApiOperation(
      value = "This feature enables ceate an offer.",
      nickname = "offers",
      response = Offer.class)
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "offer generated successfully",
            response = Offer.class),
        @ApiResponse(
            code = 400,
            message = "Bad Request, Invalid input, Invalid object",
            response = ErrorResponses.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponses.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ErrorResponses.class),
        @ApiResponse(code = 404, message = "Not Found", response = ErrorResponses.class),
        @ApiResponse(
            code = 409,
            message = "An existing item already exists",
            response = ErrorResponses.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ErrorResponses.class)
      })
  @PostMapping(
      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},
      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
  public OffersList createOffers(
      @ApiParam(
              value = "A unique id for each request generated by each application",
              required = true)
          @RequestHeader(value = AppConstants.TRANSACTION_ID, required = true)
          String transactionId,
      @RequestBody SearchCriteria searchCriteria) throws ApiException {
    return offerComposerService.createOffer(searchCriteria);
  }
  
  
  
  @GetMapping(value = "/products",
	      consumes = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE},
	      produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	  public List<Product> getProducts(
	      @ApiParam(
	              value = "A unique id for each request generated by each application",
	              required = true)
	          @RequestHeader(value = AppConstants.TRANSACTION_ID, required = true)
	          String transactionId
	          //@ApiParam(value = "Seacrh input", required = true) @PathVariable("searchString")
          //String searchString
          ) {
	    return offerComposerService.getProducts(transactionId);
	  }
}
